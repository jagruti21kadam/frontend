// Q5: Generic Function identity<T>
function identity<T>(arg: T): T {
    return arg;
}

// Calling the function with different types
console.log(identity<string>("Hello, TypeScript!"));
console.log(identity<number>(42));
console.log(identity<boolean>(true));

// Q6: Enum Color and function getColorName
enum Color {
    Red = "Red",
    Green = "Green",
    Blue = "Blue"
}

function getColorName(color: Color): string {
    return color;
}

// Testing getColorName function
console.log(getColorName(Color.Red)); // Output: "Red"
console.log(getColorName(Color.Green)); // Output: "Green"
console.log(getColorName(Color.Blue)); // Output: "Blue"

// Q7: Function printDetails with Union Type
function printDetails(value: string | number): void {
    console.log(`Type: ${typeof value}, Value: ${value}`);
}

// Testing printDetails function
printDetails("TypeScript"); // Output: Type: string, Value: TypeScript
printDetails(101); // Output: Type: number, Value: 101
